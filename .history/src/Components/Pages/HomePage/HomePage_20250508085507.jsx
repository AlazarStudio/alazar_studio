import React, { useEffect, useState } from 'react';
import classes from './HomePage.module.css';
import serverConfig from '../../../serverConfig';
import CaseHomeCard from '../../ui/HomePage/CaseHomeCard';
import { useNavigate, useParams } from 'react-router-dom';
import {CaseModal} from '../../ui/';

function transliterate(str) {
  const ru = {
    –∞: 'a',
    –±: 'b',
    –≤: 'v',
    –≥: 'g',
    –¥: 'd',
    –µ: 'e',
    —ë: 'yo',
    –∂: 'zh',
    –∑: 'z',
    –∏: 'i',
    –π: 'y',
    –∫: 'k',
    –ª: 'l',
    –º: 'm',
    –Ω: 'n',
    –æ: 'o',
    –ø: 'p',
    —Ä: 'r',
    —Å: 's',
    —Ç: 't',
    —É: 'u',
    —Ñ: 'f',
    —Ö: 'kh',
    —Ü: 'ts',
    —á: 'ch',
    —à: 'sh',
    —â: 'shch',
    —ã: 'y',
    —ç: 'e',
    —é: 'yu',
    —è: 'ya',
    ' ': '-',
    —å: '',
    —ä: '',
    —ë: 'yo',
  };
  return str
    .split('')
    .map((char) => ru[char.toLowerCase()] || char)
    .join('');
}

export default function HomePage() {
  const [caseHomes, setCaseHomes] = useState([]);
  const [categories, setCategories] = useState([]); // üÜï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [selectedCaseId, setSelectedCaseId] = useState(null);

  const navigate = useNavigate();
  const { categoryTitle } = useParams(); // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ–π—Å—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [casesHomeRes, categoriesRes] = await Promise.all([
          fetch(`${serverConfig}/casesHome`),
          fetch(`${serverConfig}/categories`),
        ]);

        const casesHomeData = await casesHomeRes.json();
        const categoriesData = await categoriesRes.json();

        setCaseHomes(casesHomeData);
        setCategories(categoriesData);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º categoryTitle –∏–∑ URL –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–µ–π—Å—ã
  const filteredCaseHomes = categoryTitle
    ? caseHomes.filter((caseHome) =>
        caseHome.categories.some(
          (category) =>
            transliterate(category.title.toLowerCase()) ===
            categoryTitle.toLowerCase() // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
        )
      )
    : caseHomes;

  return (
    <div className={classes.container}>
      <div className={classes.containerLogo}>
        <img src="/images/logoA.png" alt="Logo A" />
        <div className={classes.containerLogoCenter}>
          <img src="/images/logoAlazar.png" alt="Logo Alazar" />
          <img src="/images/logoStudio.png" alt="Logo Studio" />
        </div>
        <span>–°–¢–£–î–ò–Ø WEB-–†–ê–ó–†–ê–ë–û–¢–ö–ò –ò –ì–†–ê–§–ò–ß–ï–°–ö–û–ì–û –î–ò–ó–ê–ô–ù–ê</span>
      </div>

      <div className={classes.containerCase}>
        <div className={classes.containerCaseTop}>
          <div className={classes.containerCaseTopName}>
            <span>–ù–ê–®–ò</span>
            <span>–ö–ï–ô–°–´</span>
          </div>
          <img
            src="/images/Arrow 1.png"
            onClick={() => navigate('cases')}
            alt="Arrow"
          />
        </div>

        {/* üîΩ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className={classes.categoryMenu}>
          {categories.map((cat) => (
            <span
              key={cat.id}
              className={classes.categoryItem}
              onClick={() =>
                navigate(`/${transliterate(cat.title.toLowerCase())}`)
              } // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ URL, –∏—Å–ø–æ–ª—å–∑—É—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
            >
              {cat.title}
            </span>
          ))}
        </div>
      </div>

      {/* üîΩ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–µ–π—Å—ã */}
      <CaseHomeCard
        caseHomes={filteredCaseHomes}
        onClickCase={(id) => setSelectedCaseId(id)}
      />

      {selectedCaseId && (
        <CaseModal
          caseId={selectedCaseId}
          onClose={() => setSelectedCaseId(null)}
        />
      )}
    </div>
  );
}
